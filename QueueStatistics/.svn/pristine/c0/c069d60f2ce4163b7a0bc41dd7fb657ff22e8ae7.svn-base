package com.interactcrm.qstats.threads;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.interactcrm.dbcp.ConnectionPoolManager;
import com.interactcrm.logging.Log;
import com.interactcrm.logging.factory.LogModuleFactory;
import com.interactcrm.qstats.dao.QueueStatsDAO;
import com.interactcrm.qstats.db.MMConnectionPool;
import com.interactcrm.qstats.startup.TenantGroupObj;
import com.interactcrm.qstats.startup.TenantGroupStore;
import com.interactcrm.util.logging.LogHelper;
import com.interactcrm.utils.Utility;


/**
 * This thread finds waiting contacts in
 *  queue and max waiting duration in that particular queue and updates raw derby table..
 * @author vishakha
 *
 */
public class QueueStatsUpdater implements Runnable{
	
	private int fetcher_Sleeptime;
	private int queueGroup;
	private String quot="'";
	private int channelId;
	private boolean _debugLog 		= false;
    private boolean _errorLog 		= false;
    private boolean _infoLog 		= false;
    private Log _logger 			= null;
    private TenantGroupObj tgGroup;
	
	private static boolean isRunning	=	true;
	public QueueStatsUpdater(int queueGroup,int fetcher_Sleeptime,int channelId,TenantGroupObj tgGroup){
		
		this.fetcher_Sleeptime	= fetcher_Sleeptime;
		this.queueGroup			= queueGroup;
		this.channelId			= channelId;
		this.tgGroup	=	tgGroup;
		_logger 				= new LogHelper(QueueStatsUpdater.class).getLogger(LogModuleFactory.getModule("QueueStatsUpdater"), String.valueOf(queueGroup)+"_"+String.valueOf(channelId));		
	        
        if (_logger != null) {
            _debugLog = _logger.isDebugEnabled();
            _errorLog = _logger.isErrorEnabled();
            _infoLog = _logger.isInfoEnabled();
        }
        
        
	}
	
	/**
	 * The thread reads query from properties file using dbco getProperty method .
	 * The query finds total number of contacts waiting in queue and max waiting duration in that particular queue
	 * the data is then updated in raw table
	 */
	@Override
	public void run() {
		
		while(tgGroup.isRunning()){
			if(_infoLog){
				_logger.info("[QstatsUpdater run] tenantGrpObj "+tgGroup+" 88"+tgGroup.isRunning());
			}
			Connection dbConnection 	= null;
			PreparedStatement statement = null;
			ResultSet rs				= null;
			Connection connection 		= null;
			PreparedStatement stmt 		= null;
			Properties push	=	null ;
			FileInputStream in	=	null;
			List<Integer> queueList	=	new ArrayList<Integer>();
			
			
			try {
				
				dbConnection = MMConnectionPool.getSecondaryConnection();
				if (dbConnection != null) {

					
					
					
					//String query =MessageFormat.format((ConnectionPoolManager.getInstance().getProperty("WIC","FIND_WAITING_CONTACTS")),quot,queueGroup);
					
					String query1 =ConnectionPoolManager.getInstance().getProperty("WIC","FIND_WAITING_CONTACTS");//replaceFirst("quot", quot).replaceAll("##queueGroupId##", queueGroup);
					
					String query	=	query1.replace("##quot##", quot).replaceAll("##queueGroupId##", String.valueOf(queueGroup));
					
					if (_infoLog) {
						_logger.info("QueueStatsUpdater::  = Query Fired"+query);
					}
					statement 			=   dbConnection.prepareStatement(query); 
					
					//statement 			=   dbConnection.prepareStatement(queuequery);
					rs					=   statement.executeQuery();
					String waitingDuration	=	null;
					String waitingContacts	=	null;
					int queueId	=	0;
					while(rs.next()){
						waitingDuration	=	rs.getString("TIME");
						waitingContacts	=	rs.getString("WAITING_CONTACTS");
						queueId	=	rs.getInt("QUEUEID");
						
						
						try{
							if (_infoLog) {
								_logger.info("QueueStatsUpdater::  = Parameters  TIME ["+waitingDuration+"]  WAITING_CONTACTS [ "+waitingContacts+"] QUEUEID ["+queueId+"]");
//								_logger.info("QueueStatsUpdater::  = Parameters  TIME ["+ rs.getString("TIME")+"]  WAITING_CONTACTS [ "+rs.getString("WAITING_CONTACTS")+"] QUEUEID ["+rs.getInt("QUEUEID")+"]");
							}
							connection = MMConnectionPool.getDerbyConnection();
							
							
							
							
							String insertQuery = "update APP.QSTATS_RAW_DATA set D040 =? ,D050 =? where PKEY=?";
							stmt = connection.prepareStatement(insertQuery);
							
							if (_infoLog) {
								_logger.info("Updating waiting count and duration :: "+insertQuery+" for queuePkey "+queueId);
							}
						
							
							stmt.setInt(		1,  Integer.parseInt(waitingContacts));
							stmt.setString(		2, 	waitingDuration);	
							stmt.setInt(		3, 	queueId);
							
							int i = stmt.executeUpdate();
							
							if (_infoLog) {
								_logger.info("QueueStatsUpdater::  =Number of rows updated with waiting count and duration :: "+i);
							}
							queueList.add(queueId);
						}catch(Exception e){
							if (_errorLog) {
								_logger.error("QueueStatsUpdater :: "
										+  " ", e);
							}
						}finally{
							if (stmt != null) {
								try {
									stmt.close();
								} catch (Exception ex) {
									if (_errorLog) {
										_logger.error("QueueStatsUpdater ::   "
												+  " ", ex);
									}
								}
								stmt = null;
							}
							if (connection != null) {
								try {
									MMConnectionPool.freeDerbyConnection(connection);
								} catch (Exception ex) {
									if (_errorLog) {
										_logger.error("updateDerbyQueues :: "
												+  " ", ex);
									}
								}
								connection = null;
							}
						}
					}
				} else {
					if (_errorLog) {
						_logger.error("QueueStatsUpdater :: Error fetching db connection in cleaning "
								+   " table");
					}
				}
			} catch (Exception e) {
				if (_errorLog) {
					_logger.error("QueueStatsUpdater :: "
							+  " ", e);
				}
			} finally {
	
				if (statement != null) {
					try {
						statement.close();
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("QueueStatsUpdater ::   "
									+  " ", ex);
						}
					}
					statement = null;
				}
				if (dbConnection != null) {
					try {
						MMConnectionPool.freeSecondaryConnection(dbConnection);
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("QueueStatsUpdater :: "
									+  " ", ex);
						}
					}
					dbConnection = null;
				}
			}

			
			updateRawForNonWaitingContacts(queueList);
			try {
				Thread.sleep(fetcher_Sleeptime * 1000);
			} catch (InterruptedException e) {
			//	e.printStackTrace();
				if (_errorLog) {
					_logger.error("QueueStatsUpdater :: "
							+  " ", e);
				}
			}
			
		 }	
		}


	/**
	 * This is to clear old count in raw table , if currently no contact waiting in queue
	 * @param queueList
	 */
	private void updateRawForNonWaitingContacts(List<Integer> queueList) {
		
		
		StringBuilder sb	=	new StringBuilder();

		if (_infoLog) {
			_logger.info("QueueStatsUpdater::  = Updating RAW table for non waiting queues :: Other than queues ::"+queueList);
		}
		for(Integer queue : queueList){
			sb.append(queue+",");
			
		}
		if (_infoLog) {
			_logger.info("QueueStatsUpdater::  = String builder formed is :: "+sb);
		}
		//if(sb.length() >0){
		
			Connection connection = MMConnectionPool.getDerbyConnection();
			PreparedStatement derbyRawStattement	=	null;
			try{
				
				
				String insertQuery = "update APP.QSTATS_RAW_DATA set D040 =0 ,D050 =0 where PKEY NOT IN  ("+sb+"-100) and QUEUEGROUP_PKEY = ?";
				if (_infoLog) {
					_logger.info("QueueStatsUpdater::  =Query fired to update the raw with {0 , 0} {waiting contacts , duration} :: "+insertQuery);
				}
				derbyRawStattement = connection.prepareStatement(insertQuery);
				derbyRawStattement.setInt(1, queueGroup);
				int i	=	derbyRawStattement.executeUpdate();
				
				if (_infoLog) {
					_logger.info("QueueStatsUpdater::  = No of rows updated :: "+i+" with waiting contact 0 , duration 0 for other queues");
				}
			}catch(Exception e){
				if (_errorLog) {
					_logger.error("Error in updating waiting contacts = 0", e);
				}
			}finally{
				if (derbyRawStattement != null) {
					try {
						derbyRawStattement.close();
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("QueueStatsUpdater ::   "
									+  " ", ex);
						}
					}
					derbyRawStattement = null;
				}
				if (connection != null) {
					try {
						MMConnectionPool.freeDerbyConnection(connection);
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("updateDerbyQueues :: "
									+  " ", ex);
						}
					}
					connection = null;
				}
				
			}
	
	
	}
	
	

	
	

}
