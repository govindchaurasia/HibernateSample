package com.interactcrm.qstats.dao;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

import java.sql.Types;
import java.util.ArrayList;

import java.util.Enumeration;

import java.util.List;
import java.util.Properties;

import java.util.TreeMap;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.interactcrm.logging.Log;
import com.interactcrm.logging.factory.LogModuleFactory;

import com.interactcrm.qstats.db.MMConnectionPool;

import com.interactcrm.util.logging.LogHelper;
import com.interactcrm.utils.Utility;

public class IntializationDAO{
    private static Log _logger = new LogHelper(IntializationDAO.class).getLogger(LogModuleFactory.getModule("QueueStatistics"));
    private static boolean _debugLog = false;
    private static boolean _errorLog = false;
    private static boolean _infoLog = false;
  
    /**
     * Creates IntializationDAO object and creates logger object for the same.
     */
    public IntializationDAO() {
    }
   
    
    static{
    	if(_logger != null){
    		_debugLog = _logger.isDebugEnabled();
    		_errorLog =  _logger.isErrorEnabled();
    		_infoLog  = _logger.isInfoEnabled();
    	}
    }
	
	
	
	/**
     * Deletes all older records in table specified by tableName
     * Drops all the table and recreates
     * @param tableName : Name of table
     * @return true/false as a result of database operations
     */
	public boolean generateQueueStatsSchema() {
		
		Connection dbConnection			 	= null;
		PreparedStatement statement		 	= null;
		boolean result 					 	= false;
		Properties push					 	= new Properties();
		InputStream in					 	= null;
		TreeMap<Integer,String> queryList	= new TreeMap<Integer,String>();
		try {
			
			in = new FileInputStream(Utility.getAppHome() + File.separator + "QueueStatsSchemaGeneration.properties");			
			push.load(in);
			
	        Enumeration<Object> keys =push.keys();
	        while (keys.hasMoreElements()) {
	            String key 		= 	(String)keys.nextElement();
	            String value	=	push.getProperty(key);       	            	           	         	            
	            queryList.put(Integer.parseInt(key),value);	            		
	        }

	        if (_logger.isDebugEnabled()) {
				_logger.debug("initializeDBSchema:: queryList After Sort----"+queryList);
			}
	        
	        dbConnection = MMConnectionPool.getDerbyConnection();
	        
			for(Integer qKey:queryList.keySet()){
				try{
					if (dbConnection != null) {					
						statement = dbConnection.prepareStatement(queryList.get(qKey));
						statement.executeUpdate();
						result = true;
					}else {
						if (_errorLog) {
							_logger.error("initializeDBSchema :: Error fetching db connection in cleaning table");
						}
					}
				}catch(Exception e){
					if (_errorLog) {
						_logger.error("initializeDBSchema :: Error in Executing Query--- ", e);
					}
				}
				
			}
	        
			if (_logger.isDebugEnabled()) {
				_logger.debug("initializeDBSchema:: Query Executed Successfully.");
			}
		} catch (Exception e) {
			if (_errorLog) {
				_logger.error("initializeDBSchema :: E Error in cleaning "
						+  " table.", e);
			}
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("initializeDBSchema ::  Error in cleaning "
								+  " table.", ex);
					}
				}
				//statement = null;
			}
			if (dbConnection != null) {
				try {
					MMConnectionPool.freeDerbyConnection(dbConnection);
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("initializeDBSchema :: Error in cleaning "
								+  " table.", ex);
					}
				}
				//dbConnection = null;
			}
		}
		return result;
	}
	
	/**
     * Populates data in derby tables (raw/derby) for provided tenantGroupList
     * @param tableName : Name of table
     * @return true/false as a result of database operations
     */
	public boolean generateQueueStatsSeed() {
		
		Connection dbConnection 			= null;
		Connection dbConnectionderby		= null;
		PreparedStatement statement 		= null;
		ResultSet rs						= null;
		ResultSetMetaData rsmd				= null;
		boolean result 						= false;
		Properties push					 	= new Properties();
		InputStream in					 	= null;
		TreeMap<String,String> queryList	= new TreeMap<String,String>();
		ArrayList<String> insertQueryList	= new ArrayList<String>();
		
		try {
			
			in = new FileInputStream(Utility.getAppHome() + File.separator + "QueueStatsSeedGeneration.properties");			
			push.load(in);
			
	        Enumeration<Object> keys =push.keys();
	        while (keys.hasMoreElements()) {
	            String key 		= 	(String)keys.nextElement();
	            String value	=	push.getProperty(key);
	            
	            queryList.put(key,parseQuery(value));	            		
	        }

	        if (_logger.isDebugEnabled()) {
				_logger.debug("generateQueueStatsSeed:: queryList After Sort----"+queryList);
			}
	        
	        dbConnection = MMConnectionPool.getDBConnection();
	        
	        for(String qKey:queryList.keySet()){	         
			
				if (dbConnection != null) {					
					statement = dbConnection.prepareStatement(queryList.get(qKey));
					rs		  = statement.executeQuery();
					
					if(rs != null){						
						rsmd	  			= rs.getMetaData();
												
						while(rs.next()){		
							String columnName	=	"";
							String columnValues	=   "";
							
							for (int i = 1; i <= rsmd.getColumnCount(); i++) {								
								columnName		+= rsmd.getColumnLabel(i)+",";
								
								if(rsmd.getColumnType(i) == Types.VARCHAR){
									//columnValues	+= "'"+rs.getString(rsmd.getColumnName(i))+"',";
									/*if (_logger.isDebugEnabled()) {
										_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.VARCHAR----"+ rsmd.getColumnType(i) );
									}*/
									
									
									try{
										columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
									}catch(Exception e){
										columnValues	+= "'',";
										
									}
									
								}else if(rsmd.getColumnType(i) == Types.INTEGER){
									try{
										Integer.parseInt(rs.getString(rsmd.getColumnLabel(i)));
										columnValues	+= rs.getString(rsmd.getColumnLabel(i))+",";
										/*if (_logger.isDebugEnabled()) {
											_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.INTEGER(try)----"+ rsmd.getColumnType(i) );
										}*/
									}catch(Exception e){
										columnValues	+= "0,";
										
									}
								}else if(rsmd.getColumnType(i) == Types.TIMESTAMP){
									columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
									/*if (_logger.isDebugEnabled()) {
										_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.TIMESTAMP----"+ rsmd.getColumnType(i) );
									}*/
								}else if(rsmd.getColumnType(i) == Types.TINYINT){
									try{
										Integer.parseInt(rs.getString(rsmd.getColumnLabel(i)));
										columnValues	+= rs.getString(rsmd.getColumnLabel(i))+",";
										/*if (_logger.isDebugEnabled()) {
											_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.TINYINT(try)----"+ rsmd.getColumnType(i) );
										}*/
									}catch(Exception e){
										columnValues	+= "0,";
										
									}
								}else{
									columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
								}							
								
							}
							columnName 		= columnName.substring(0,columnName.length()-1);
							columnValues	= columnValues.substring(0,columnValues.length()-1);
							String finalString ="insert into APP."+qKey+"("+ columnName +") values("+columnValues+")";
							if (_logger.isDebugEnabled()) {
								_logger.debug("generateQueueStatsSeed:: Query Formed----"+ finalString);
							}
							insertQueryList.add(finalString);
						}												
					}else{

				        if (_logger.isDebugEnabled()) {
							_logger.debug("generateQueueStatsSeed:: ResultSet is Null");
						}
					}
					
				}else {
					if (_errorLog) {
						_logger.error("generateQueueStatsSeed :: Error fetching db connection ");
					}
				}
	        }
	        
	        if (_logger.isDebugEnabled()) {
				_logger.debug("generateQueueStatsSeed:: insertQueryList===["+insertQueryList+"]");
			}
	        
	       
	        	dbConnectionderby=MMConnectionPool.getDerbyConnection();
	        	
	        	 for(String query:insertQueryList){
	        		 try{
		 	        	if (dbConnectionderby != null) {					
		 					statement = dbConnectionderby.prepareStatement(query);
		 					statement.executeUpdate();				
		 					
		 				}else {
		 					if (_errorLog) {
		 						_logger.error("generateQueueStatsSeed :: Error fetching db connection in cleaning "
		 								+   " table");
		 					}
		 				}
	        		 }catch(Exception e){
	     	        	if (_errorLog) {
	     					_logger.error("generateQueueStatsSeed :: Exception in Insertion query--["+query+"]", e);
	     				}
	     	        }	
	 	        }
	               	       	        
	        
		} catch (Exception e) {
			if (_errorLog) {
				_logger.error("generateQueueStatsSeed :: E Error in cleaning "
						+  " table.", e);
			}
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("generateQueueStatsSeed ::  Error in cleaning "
								+  " table.", ex);
					}
				}
				statement = null;
			}
			if (dbConnection != null) {
				try {
					MMConnectionPool.freeConnection(dbConnection);					
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("generateQueueStatsSeed :: Error in cleaning "
								+  " table.", ex);
					}
				}
				
			}
			if (dbConnectionderby != null) {
				try {

					MMConnectionPool.freeDerbyConnection(dbConnectionderby);
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("generateQueueStatsSeed :: Error in cleaning "
								+  " table.", ex);
					}
				}
				
			}
		}
		return result;
	}
	
	
	
	/**
	 * This deletes all old data from derby tables , when refersh request is received
	 * @param tgId
	 * @return
	 */
	public boolean deleteOldTgData(String tgId){

		
		Connection dbConnection			 	= null;
		PreparedStatement statement		 	= null;
		boolean result 					 	= false;
		Properties push					 	= new Properties();
		InputStream in					 	= null;
		TreeMap<Integer,String> queryList	= new TreeMap<Integer,String>();
		  if (_logger.isDebugEnabled()) {
				_logger.debug("deleteOldTgData:: Deleteting old data for tgId "+tgId);
			}
		try {
			
			in = new FileInputStream(Utility.getAppHome() + File.separator + "QueueStatsRefresh.properties");			
			push.load(in);
			
	        Enumeration<Object> keys =push.keys();
	        while (keys.hasMoreElements()) {
	            String key 		= 	(String)keys.nextElement();
	            String value	=	push.getProperty(key);       	            	           	         	            
	            queryList.put(Integer.parseInt(key),parseQueryForRefesh(value,tgId));	            		
	        }

	        if (_logger.isDebugEnabled()) {
				_logger.debug("deleteOldTgData:: queryList After Sort----"+queryList);
			}
	        
	        dbConnection = MMConnectionPool.getDerbyConnection();
	        
			for(Integer qKey:queryList.keySet()){
				try{
					if (dbConnection != null) {					
						statement = dbConnection.prepareStatement(queryList.get(qKey));
						statement.executeUpdate();
						result = true;
					}else {
						if (_errorLog) {
							_logger.error("deleteOldTgData :: Error fetching db connection in cleaning table");
						}
					}
				}catch(Exception e){
					if (_errorLog) {
						_logger.error("deleteOldTgData :: Error in Executing Query--- ", e);
					}
				}
				
			}
	        
			if (_logger.isDebugEnabled()) {
				_logger.debug("deleteOldTgData:: Query Executed Successfully.");
			}
		} catch (Exception e) {
			if (_errorLog) {
				_logger.error("deleteOldTgData :: E Error in cleaning "
						+  " table.", e);
			}
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("deleteOldTgData ::  Error in cleaning "
								+  " table.", ex);
					}
				}
				//statement = null;
			}
			if (dbConnection != null) {
				try {
					MMConnectionPool.freeDerbyConnection(dbConnection);
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("deleteOldTgData :: Error in cleaning "
								+  " table.", ex);
					}
				}
				//dbConnection = null;
			}
		}
		return result;
	
		
	}
	
	/**
	 * Here data is populated again derby tables 
	 * @param tg
	 * @return
	 */
	public boolean updateTablesOnRefesh(String tg){

		
		Connection dbConnection 			= null;
		Connection dbConnectionderby		= null;
		PreparedStatement statement 		= null;
		ResultSet rs						= null;
		ResultSetMetaData rsmd				= null;
		boolean result 						= false;
		Properties push					 	= new Properties();
		InputStream in					 	= null;
		TreeMap<String,String> queryList	= new TreeMap<String,String>();
		ArrayList<String> insertQueryList	= new ArrayList<String>();
		
		if (_logger.isDebugEnabled()) {
			_logger.debug("Updating raw/display/channel for new changes  ");
		}
		
		try {
			
			in = new FileInputStream(Utility.getAppHome() + File.separator + "QueueStatsSeedGeneration.properties");			
			push.load(in);
			
	        Enumeration<Object> keys =push.keys();
	        while (keys.hasMoreElements()) {
	            String key 		= 	(String)keys.nextElement();
	            String value	=	push.getProperty(key);
	            
	            queryList.put(key,parseQueryForRefesh(value,tg));	            		
	        }

	        if (_logger.isDebugEnabled()) {
				_logger.debug("Updating raw/display/channel for new changes  "+queryList);
			}
	        
	        dbConnection = MMConnectionPool.getDBConnection();
	        
	        for(String qKey:queryList.keySet()){	         
			
				if (dbConnection != null) {					
					statement = dbConnection.prepareStatement(queryList.get(qKey));
					rs		  = statement.executeQuery();
					
					if(rs != null){						
						rsmd	  			= rs.getMetaData();
												
						while(rs.next()){		
							String columnName	=	"";
							String columnValues	=   "";
							
							for (int i = 1; i <= rsmd.getColumnCount(); i++) {								
								columnName		+= rsmd.getColumnLabel(i)+",";
								if (_logger.isDebugEnabled()) {
									_logger.debug("[updateTablesOnRefesh]:: columnName-->"+columnName);
								}
								if(rsmd.getColumnType(i) == Types.VARCHAR){
									//columnValues	+= "'"+rs.getString(rsmd.getColumnName(i))+"',";
									/*if (_logger.isDebugEnabled()) {
										_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.VARCHAR----"+ rsmd.getColumnType(i) );
									}*/
									
									
									try{
										columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
									}catch(Exception e){
										columnValues	+= "'',";
										if (_logger.isDebugEnabled()) {
											_logger.debug("[updateTablesOnRefesh]:: rsmd.getColumnType(i) == Types.VARCHAR(catch)----"+ rsmd.getColumnType(i) +"    Label--->"+rsmd.getColumnLabel(i));
										}
									}
									
								}else if(rsmd.getColumnType(i) == Types.INTEGER){
									try{
										Integer.parseInt(rs.getString(rsmd.getColumnLabel(i)));
										columnValues	+= rs.getString(rsmd.getColumnLabel(i))+",";
										/*if (_logger.isDebugEnabled()) {
											_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.INTEGER(try)----"+ rsmd.getColumnType(i) );
										}*/
									}catch(Exception e){
										columnValues	+= "0,";
										if (_logger.isDebugEnabled()) {
											_logger.debug("[updateTablesOnRefesh]:: rsmd.getColumnType(i) == Types.INTEGER(catch)----"+ rsmd.getColumnType(i) +"    Label--->"+rsmd.getColumnLabel(i));
										}
									}
								}else if(rsmd.getColumnType(i) == Types.TIMESTAMP){
									columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
									/*if (_logger.isDebugEnabled()) {
										_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.TIMESTAMP----"+ rsmd.getColumnType(i) );
									}*/
								}else if(rsmd.getColumnType(i) == Types.TINYINT){
									try{
										Integer.parseInt(rs.getString(rsmd.getColumnLabel(i)));
										columnValues	+= rs.getString(rsmd.getColumnLabel(i))+",";
										/*if (_logger.isDebugEnabled()) {
											_logger.debug("generateQueueStatsSeed:: rsmd.getColumnType(i) == Types.TINYINT(try)----"+ rsmd.getColumnType(i) );
										}*/
									}catch(Exception e){
										columnValues	+= "0,";
										if (_logger.isDebugEnabled()) {
											_logger.debug("[updateTablesOnRefesh]:: rsmd.getColumnType(i) == Types.TINYINT(catch)----"+ rsmd.getColumnType(i) +"    Label--->"+rsmd.getColumnLabel(i));
										}
									}
								}else{
									columnValues	+= "'"+rs.getString(rsmd.getColumnLabel(i))+"',";
								}							
								
							}
							columnName 		= columnName.substring(0,columnName.length()-1);
							columnValues	= columnValues.substring(0,columnValues.length()-1);
							String finalString ="insert into APP."+qKey+"("+ columnName +") values("+columnValues+")";
							if (_logger.isDebugEnabled()) {
								_logger.debug(" [updateTablesOnRefesh ] Update tables on refresh :: Query Formed----"+ finalString);
							}
							insertQueryList.add(finalString);
						}												
					}else{

				        if (_logger.isDebugEnabled()) {
							_logger.debug("[updateTablesOnRefesh]:: ResultSet is Null");
						}
					}
					
				}else {
					if (_errorLog) {
						_logger.error("[updateTablesOnRefesh] :: Error fetching db connection ");
					}
				}
	        }
	        
	        if (_logger.isDebugEnabled()) {
				_logger.debug("[updateTablesOnRefesh]:: insertQueryList===["+insertQueryList+"]");
			}
	        
	       
	        	dbConnectionderby=MMConnectionPool.getDerbyConnection();
	        	
	        	 for(String query:insertQueryList){
	        		 try{
		 	        	if (dbConnectionderby != null) {					
		 					statement = dbConnectionderby.prepareStatement(query);
		 					statement.executeUpdate();				
		 					
		 				}else {
		 					if (_errorLog) {
		 						_logger.error("[updateTablesOnRefesh] :: Error fetching db connection in cleaning "
		 								+   " table");
		 					}
		 				}
	        		 }catch(Exception e){
	     	        	if (_errorLog) {
	     					_logger.error("[updateTablesOnRefesh] :: Exception in Insertion query--["+query+"]", e);
	     				}
	     	        }	
	 	        }
	               	       	        
	        
		} catch (Exception e) {
			if (_errorLog) {
				_logger.error("[updateTablesOnRefesh] :: E Error in cleaning "
						+  " table.", e);
			}
		} finally {

			if (statement != null) {
				try {
					statement.close();
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("[updateTablesOnRefesh] ::  Error in cleaning "
								+  " table.", ex);
					}
				}
				statement = null;
			}
			if (dbConnection != null) {
				try {
					MMConnectionPool.freeConnection(dbConnection);					
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("[updateTablesOnRefesh] :: Error in cleaning "
								+  " table.", ex);
					}
				}
				dbConnection = null;
			}
			if (dbConnectionderby != null) {
				try {

					MMConnectionPool.freeDerbyConnection(dbConnectionderby);
				} catch (Exception ex) {
					if (_errorLog) {
						_logger.error("[updateTablesOnRefesh] :: Error in cleaning "
								+  " table.", ex);
					}
				}
				dbConnectionderby = null;
			}
		}
		return result;
	
	}
	
	private String parseQueryForRefesh(String query,String tgId){

		try{   		 	   		 	
   		    String re1	=	"(\\$)";	// Any Single Character 1
   		    String re2	=	"(P)";	// Variable Name 1
   		    String re3	=	"(\\{)";	// Any Single Character 2
   		    String re4	=	"(TenantGroupPkeyList)";	
   		    String re5	=	"(\\})";	// Any Single Character 3
   		    String regex = null;
   		    
   		    Pattern p = Pattern.compile(re1+re2+re3+re4+re5,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
   		    Matcher m = p.matcher(query);
   		    
   		   // if(m.find()){
   		    	while (m.find()){
   		    		String c1		=	m.group(1);
   		    		String var1		=	m.group(2);
   		    		String c2		=	m.group(3);
   		    		String alphanum	=	m.group(4);
   		    		String c3		=	m.group(5);
   		        
   		    		if (_logger.isDebugEnabled()) {
   		    			_logger.debug("parseQueryForDelete:: alphanum.toString()"+alphanum.toString());
   		    		}
   		    		regex = c1.toString()+var1.toString()+c2.toString()+alphanum.toString()+c3.toString();
   		    	}
   		    	query= query.replace(regex, tgId);   		    
   		    	if (_logger.isDebugEnabled()) {
   		    		_logger.debug("parseQueryForDelete:: query"+query);
   		    	}
   		  //  }
   		       		    
	   	}catch(Exception e){	   	
	   		if (_logger.isErrorEnabled()) {
				_logger.error("parseQueryForDelete:: Exception ", e);
			} 
	    }finally{
	    	if (_logger.isDebugEnabled()) {
				_logger.debug("parseQueryForDelete:: Finally of queryAnalyser--"+query);
			}	    	
	    }
		
		return query;
	
		
	}

	private String parseQuery(String query){
		try{   		 	   		 	
   		    String re1	=	"(\\$)";	// Any Single Character 1
   		    String re2	=	"(P)";	// Variable Name 1
   		    String re3	=	"(\\{)";	// Any Single Character 2
   		    String re4	=	"(TenantGroupPkeyList)";	
   		    String re5	=	"(\\})";	// Any Single Character 3
   		    String regex = null;
   		    
   		    Pattern p = Pattern.compile(re1+re2+re3+re4+re5,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
   		    Matcher m = p.matcher(query);
   		    
   		   // if(m.find()){
   		    	while (m.find()){
   		    		String c1		=	m.group(1);
   		    		String var1		=	m.group(2);
   		    		String c2		=	m.group(3);
   		    		String alphanum	=	m.group(4);
   		    		String c3		=	m.group(5);
   		        
   		    		if (_logger.isDebugEnabled()) {
   		    			_logger.debug("parseQuery:: alphanum.toString()"+alphanum.toString());
   		    		}
   		    		regex = c1.toString()+var1.toString()+c2.toString()+alphanum.toString()+c3.toString();
   		    	}
   		    	query= query.replace(regex, new QueueStatsDAO().getTenantGroupsList());   		    
   		    	if (_logger.isDebugEnabled()) {
   		    		_logger.debug("parseQuery:: query"+query);
   		    	}
   		  //  }
   		       		    
	   	}catch(Exception e){	   	
	   		if (_logger.isErrorEnabled()) {
				_logger.error("parseQuery:: Exception ", e);
			} 
	    }finally{
	    	if (_logger.isDebugEnabled()) {
				_logger.debug("parseQuery:: Finally of queryAnalyser--"+query);
			}	    	
	    }
		
		return query;
	}

	
}

