package com.interactcrm.qstats.threads;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import com.interactcrm.dbcp.ConnectionPoolManager;
import com.interactcrm.logging.Log;
import com.interactcrm.logging.factory.LogModuleFactory;
import com.interactcrm.qstats.bean.QueryBean;
import com.interactcrm.qstats.bean.QueueGroupStore;
import com.interactcrm.qstats.db.MMConnectionPool;
import com.interactcrm.qstats.startup.QueryFactory;
import com.interactcrm.qstats.startup.TenantGroupObj;
import com.interactcrm.util.logging.LogHelper;



/**
 * This thread finds waiting contacts in
 *  queue and max waiting duration in that particular queue and updates raw derby table..
 * @author vishakha
 *
 */
public class QueueStatsUpdater implements Runnable{
	
	private int fetcher_Sleeptime;
	private int queueGroup;
	private String quot="'";
	private int channelId;
	private boolean _debugLog 		= false;
    private boolean _errorLog 		= false;
    private boolean _infoLog 		= false;
    private Log _logger 			= null;
    private TenantGroupObj tgGroup;
	private static boolean isRunning	=	true;
	private int tgId;
	private String query="";
	private String summaryDetailsQuery="";
	private String queuegroupInsertQuery = null;

	public QueueStatsUpdater(int queueGroup,int fetcher_Sleeptime,int channelId,TenantGroupObj tgGroup,int tgId){
	
		this.fetcher_Sleeptime	= fetcher_Sleeptime;
		this.queueGroup			= queueGroup;
		this.channelId			= channelId;
		this.tgGroup	=	tgGroup;
		this.tgId=tgId;
		_logger 				= new LogHelper(QueueStatsUpdater.class).getLogger(LogModuleFactory.getModule("QueueStatsUpdater"), String.valueOf(queueGroup)+"_"+String.valueOf(channelId));		
	   
		
        if (_logger != null) {
            _debugLog = _logger.isDebugEnabled();
            _errorLog = _logger.isErrorEnabled();
            _infoLog = _logger.isInfoEnabled();
        }
        QueryBean qBean = QueryFactory.getInstance().getquery("getWaitingContacts");
		String query2=qBean.getQueryString();
	    summaryDetailsQuery=query2.replace("##quot##", quot).replaceAll("##queueGroupId##", String.valueOf(queueGroup));
      
	}
	/**
	 * The thread reads query from properties file using dbco getProperty method .
	 * The query finds total number of contacts waiting in queue and max waiting duration in that particular queue
	 * the data is then updated in raw table
	 */
	@Override
	public void run() {

		while (tgGroup.isRunning()) {
			if (_infoLog) {
				_logger.info("[QstatsUpdater run] tenantGrpObj " + tgGroup + " 88" + tgGroup.isRunning());
			}
			  
			if (channelId != 2) {
				
				insertQueueGroupContactData();
				try {
					Thread.sleep(fetcher_Sleeptime * 1000);
				} catch (InterruptedException e) {
					if (_errorLog) {
						_logger.error("QueueStatsUpdater :: " + " ", e);
					}
				}
			}

		}
	}

	
	private void insertQueueGroupContactData()
	{
		Connection dbSecondaryconnection=null;
		ResultSet dbrs=null;
		PreparedStatement dbstatement = null;
		PreparedStatement derbystatement=null;
		Connection derbyconnection=null;
		ResultSetMetaData rsmd				= null;
		ArrayList<String> insertQueryList	= new ArrayList<String>();
		long epoch=System.currentTimeMillis();
		boolean insertFlag=false,summaryFlag=false;
		List<Integer> queueList	=	new ArrayList<Integer>();
		
		try {
			dbSecondaryconnection=MMConnectionPool.getSecondaryConnection();
			
			if(dbSecondaryconnection!=null)
			{		
				dbSecondaryconnection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
				if (this.queuegroupInsertQuery == null){
					 query =ConnectionPoolManager.getInstance().getProperty("WIC","FIND_QUEUEGROUP_WAITING_CONTACTS");
					this.queuegroupInsertQuery = query.replaceAll("##quot##", quot).replaceAll("##queueGroupId##", String.valueOf(queueGroup)).replaceAll("##tenantGroupId##", String.valueOf(tgId));
				}
				
				if (_logger.isDebugEnabled()) {
					_logger.debug("insertQueuegroupData:: FIND_QUEUEGROUP_WAITING_CONTACTS Query----"+query);
				}
				dbstatement 	=   dbSecondaryconnection.prepareStatement(this.queuegroupInsertQuery,ResultSet.TYPE_SCROLL_INSENSITIVE, 
						  ResultSet.CONCUR_READ_ONLY); 
				dbrs					=   dbstatement.executeQuery();
				if(_debugLog)
				{
					_logger.debug("Resultset is "+dbrs);
				}
				if(dbrs.next())
				{
					dbrs.beforeFirst();
					rsmd	  			= dbrs.getMetaData();
					while(dbrs.next())
					{
					
						String columnName	=	"";
						String columnValues	=   "";
						
						for (int i = 1; i <= rsmd.getColumnCount(); i++) {								
							columnName		+= rsmd.getColumnLabel(i)+",";
							
							if(rsmd.getColumnType(i) == Types.VARCHAR){
								try{
									
								columnValues	+= "'"+dbrs.getString(rsmd.getColumnLabel(i))+"',";
									
								}catch(Exception e){
									columnValues	+= "'',";
								}
							}else if(rsmd.getColumnType(i) == Types.INTEGER){
								try{
									Integer.parseInt(dbrs.getString(rsmd.getColumnLabel(i)));
									
									columnValues	+= dbrs.getString(rsmd.getColumnLabel(i))+",";
									
								}catch(Exception e){
									columnValues	+= "0,";
								}
							}else if(rsmd.getColumnType(i) == Types.TIMESTAMP){
								
								columnValues	+= "'"+dbrs.getString(rsmd.getColumnLabel(i))+"',";
								
							}else if(rsmd.getColumnType(i) == Types.BIGINT){
								try {
									
									Long.parseLong(dbrs.getString(rsmd.getColumnLabel(i)));
									if ("QUEUETIME".equals(rsmd.getColumnLabel(i))) {
										columnValues += "'"+getFormattedQueueTime(Long.parseLong(""+dbrs.getInt("MILLISECS"))) + "',";
									} else {
										columnValues += dbrs.getString(rsmd.getColumnLabel(i)) + ",";
										
									}
								}catch(Exception e){
									columnValues	+= "0,";
								}
							}else{
								
								columnValues	+= "'"+dbrs.getString(rsmd.getColumnLabel(i))+"',";
							}														
						}
						columnName 		= columnName.substring(0,columnName.length()-1);
						columnValues	= columnValues.substring(0,columnValues.length()-1);
						String finalString ="insert into APP.qstats_contact_queuegroup_"+queueGroup+" ("+ columnName +",version) values("+columnValues+","+epoch+")";
						insertQueryList.add(finalString);
					}
					
					// Inserting in Derby QueueGroup Table
					
					derbyconnection=MMConnectionPool.getDerbyConnection();
					try {
						for(String executequery:insertQueryList){
							if (derbyconnection != null) {					
			 					derbystatement = derbyconnection.prepareStatement(executequery);
			 					derbystatement.executeUpdate();	
			 					insertFlag=true;
			 				}
							else
							{
								if (_errorLog) {
									_logger.error("[insertQueuegroupData] :: Exception in creating derbyconnection");
								}
							}
						 
					   }
						
						PreparedStatement stmtSummary=derbyconnection.prepareStatement(summaryDetailsQuery);
						stmtSummary.setLong(1, epoch);
						ResultSet rsSummary=stmtSummary.executeQuery();
						String waitingDuration	=	null;
						String waitingContacts	=	null;
						int queueId	=	0;
						PreparedStatement stmt =null;
						try {
							if(rsSummary!=null)
							{
								while(rsSummary.next())
								{
									waitingDuration	=	rsSummary.getString("TIME");
									waitingContacts	=	rsSummary.getString("WAITING_CONTACTS");
									queueId	=	rsSummary.getInt("QUEUEID");
								
										if (_infoLog) {
											_logger.info("[insertQueuegroupData]::  = Parameters  TIMEDURATION ["+waitingDuration+"]  WAITING_CONTACTS [ "+waitingContacts+"] QUEUEID ["+queueId+"]");
										}
										String updateQuery = "update APP.QSTATS_RAW_DATA set D040 =? ,D050 =? where PKEY=?";
										stmt = derbyconnection.prepareStatement(updateQuery);
										
										if (_infoLog) {
											_logger.info("Updating waiting count and duration :: "+updateQuery+" for queuePkey "+queueId);
										}
										stmt.setInt(		1,  Integer.parseInt(waitingContacts));
										stmt.setString(		2, 	waitingDuration);	
										stmt.setInt(		3, 	queueId);
										
										int i = stmt.executeUpdate();
										summaryFlag=true;
										if (_infoLog) {
											
											_logger.info("[insertQueuegroupData]:: = Number of rows updated with waiting count and duration :: "+i);
										}
										queueList.add(queueId);
								}
							
							}
							else
							{
								if(_debugLog)
								{
									_logger.debug("[insertQueuegroupData]:: getWaitingContacts ResultSet is null");
								}
							}
							
						} catch (Exception e) {
							if (_errorLog) {
								_logger.error("[insertQueuegroupData] :: Exception in inserting", e);
							}
						}
						finally
						{


							if(stmtSummary!=null)
							{
								try {
									stmtSummary.close();
								} catch (Exception e2) {
									if (_logger.isErrorEnabled()) {
										_logger.error("[insertQueuegroupData] :: Error in closing statement ", e2);
									}
								}
							}
							if(derbyconnection!=null)
							{
								try
								{
									MMConnectionPool.freeDerbyConnection(derbyconnection);
								}
								catch(Exception e3)
								{
									if (_logger.isErrorEnabled()) {
										_logger.error("[insertQueuegroupData] :: Error in closing connection ", e3);
									}
								}
							}			
							
						
						}
						// Creating a static Map with QueueGroup and Version
						
						if (insertFlag == true && summaryFlag == true) {
							QueueGroupStore.getInstance().setVersion(queueGroup, epoch);
							updateRawForNonWaitingContacts(queueList);
						}
						else
						{
							if(_errorLog)
							{
								_logger.error("[insertQueuegroupData] ::  Failed to execute insertQueuegroupData method");
							}
						}
					} catch (Exception e) {
						if(_errorLog)
						{
							_logger.error("[insertQueuegroupData] :: Error in  inserting into derby",e);
						}
					}
					finally
					{



						if(derbystatement!=null)
						{
							try {
								derbystatement.close();
							} catch (Exception e2) {
								if (_logger.isErrorEnabled()) {
									_logger.error("[insertQueuegroupData] :: Error in closing statement ", e2);
								}
							}
						}
						if(derbyconnection!=null)
						{
							try
							{
								MMConnectionPool.freeDerbyConnection(derbyconnection);
							}
							catch(Exception e3)
							{
								if (_logger.isErrorEnabled()) {
									_logger.error("[insertQueuegroupData] :: Error in closing connection ", e3);
								}
							}
						}			
					
					}
				}
				else
				{
					if (_debugLog) {
						_logger.debug("insertQueuegroupData:: FIND_QUEUEGROUP_WAITING_CONTACTS ResultSet is null");
					}
				}
			}
			else
			{
				if (_debugLog) {
					_logger.debug("insertQueuegroupData:: Error in creating secondary connection");
				}
			}
		} catch (Exception e) {
			if (_logger.isErrorEnabled()) {
				_logger.error("insertQueuegroupData :: Error in executing insertQueuegroupData", e);
			}
		}
		finally
		{

			if(dbstatement!=null)
			{
				try {
					dbstatement.close();
				} catch (Exception e2) {
					if (_logger.isErrorEnabled()) {
						_logger.error("insertQueuegroupData :: Error in closing statement ", e2);
					}
				}
			}
			if(dbSecondaryconnection!=null)
			{
				try
				{
					MMConnectionPool.freeSecondaryConnection(dbSecondaryconnection);
				}
				catch(Exception e3)
				{
					if (_logger.isErrorEnabled()) {
						_logger.error("insertQueuegroupData :: Error in closing connection ", e3);
					}
				}
			}
			
		
		}
		
	}

	
	

	private String getFormattedQueueTime(long totalMinutes)
	{
		String date="";
		if (((totalMinutes / 1440)) > 0) {
			date = ((totalMinutes / 1440)) + " d " + ((totalMinutes / 60) % 24) + " h "
					+ (totalMinutes % 60) + " m ";
		} else if (((totalMinutes / 60) % 24) > 0) {
			date = ((totalMinutes / 60) % 24) + " h " + (totalMinutes % 60) + " m ";
		} else if ((totalMinutes % 60) > 0) {
			date = (totalMinutes % 60) + " m ";
		} else {
			date = "0 m";
		}
			
		return date;
	}
	
	
	/**
	 * This is to clear old count in raw table , if currently no contact waiting in queue
	 * @param queueList
	 */
	private void updateRawForNonWaitingContacts(List<Integer> queueList) {
		
		
		StringBuilder sb	=	new StringBuilder();

		if (_infoLog) {
			_logger.info("QueueStatsUpdater::  = Updating RAW table for non waiting queues :: Other than queues ::"+queueList);
		}
		for(Integer queue : queueList){
			sb.append(queue+",");
			
		}
		if (_infoLog) {
			_logger.info("QueueStatsUpdater::  = String builder formed is :: "+sb);
		}
		//if(sb.length() >0){
		
			Connection connection = MMConnectionPool.getDerbyConnection();
			PreparedStatement derbyRawStattement	=	null;
			try{
				
				
				String insertQuery = "update APP.QSTATS_RAW_DATA set D040 =0 ,D050 =0 where PKEY NOT IN  ("+sb+"-100) and QUEUEGROUP_PKEY = ?";
				if (_infoLog) {
					_logger.info("QueueStatsUpdater::  =Query fired to update the raw with {0 , 0} {waiting contacts , duration} :: "+insertQuery);
				}
				derbyRawStattement = connection.prepareStatement(insertQuery);
				derbyRawStattement.setInt(1, queueGroup);
				int i	=	derbyRawStattement.executeUpdate();
				
				if (_infoLog) {
					_logger.info("QueueStatsUpdater::  = No of rows updated :: "+i+" with waiting contact 0 , duration 0 for other queues");
				}
			}catch(Exception e){
				if (_errorLog) {
					_logger.error("Error in updating waiting contacts = 0", e);
				}
			}finally{
				if (derbyRawStattement != null) {
					try {
						derbyRawStattement.close();
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("QueueStatsUpdater ::   "
									+  " ", ex);
						}
					}
					derbyRawStattement = null;
				}
				if (connection != null) {
					try {
						MMConnectionPool.freeDerbyConnection(connection);
					} catch (Exception ex) {
						if (_errorLog) {
							_logger.error("updateDerbyQueues :: "
									+  " ", ex);
						}
					}
					connection = null;
				}
				
			}
	
			
	
	}
	
	

}
